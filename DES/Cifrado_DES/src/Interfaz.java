
import java.awt.Graphics;
import java.io.*;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

// import para el cifrado
import javax.crypto.*;
import javax.crypto.spec.*;   //generar las llaves del cifrado
import java.security.*;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author cactu
 */
public class Interfaz extends javax.swing.JFrame {

    
    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        panel = new javax.swing.JPanel();
        lblInstrucciones = new javax.swing.JLabel();
        buArchivo = new javax.swing.JButton();
        lblArchivo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArchivo = new javax.swing.JTextArea();
        txtLlave = new javax.swing.JTextField();
        des = new javax.swing.JButton();
        cif = new javax.swing.JButton();
        buLlave = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panel.setBackground(new java.awt.Color(137, 176, 174));
        panel.setPreferredSize(new java.awt.Dimension(600, 450));

        lblInstrucciones.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        lblInstrucciones.setForeground(new java.awt.Color(250, 249, 249));
        lblInstrucciones.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblInstrucciones.setText("<html>Deberán de realizar un programa con interfaz gráfica donde deba de  ingresar un archivo en txt, que quiera cifrarlo y agregar la clave.   Entrega el archivo .cifrado y tiene otra ventana para poderlo descifrar. </html>");
        lblInstrucciones.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        buArchivo.setBackground(new java.awt.Color(85, 91, 110));
        buArchivo.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        buArchivo.setForeground(new java.awt.Color(250, 249, 249));
        buArchivo.setText("Seleccionar archivo");
        buArchivo.setBorderPainted(false);
        buArchivo.setPreferredSize(new java.awt.Dimension(150, 25));
        buArchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buArchivoMouseClicked(evt);
            }
        });
        buArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buArchivoActionPerformed(evt);
            }
        });

        lblArchivo.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        lblArchivo.setForeground(new java.awt.Color(250, 249, 249));
        lblArchivo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblArchivo.setText("...");

        txtArchivo.setEditable(false);
        txtArchivo.setBackground(new java.awt.Color(85, 91, 110));
        txtArchivo.setColumns(20);
        txtArchivo.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        txtArchivo.setForeground(new java.awt.Color(250, 249, 249));
        txtArchivo.setRows(5);
        jScrollPane1.setViewportView(txtArchivo);

        txtLlave.setEditable(false);
        txtLlave.setBackground(new java.awt.Color(85, 91, 110));
        txtLlave.setFont(new java.awt.Font("Calibri Light", 0, 14)); // NOI18N
        txtLlave.setForeground(new java.awt.Color(250, 249, 249));
        txtLlave.setPreferredSize(new java.awt.Dimension(150, 25));

        des.setBackground(new java.awt.Color(85, 91, 110));
        des.setForeground(new java.awt.Color(250, 249, 249));
        des.setText("Descifrar");
        des.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desActionPerformed(evt);
            }
        });

        cif.setBackground(new java.awt.Color(85, 91, 110));
        cif.setForeground(new java.awt.Color(250, 249, 249));
        cif.setText("Cifrar");
        cif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cifActionPerformed(evt);
            }
        });

        buLlave.setBackground(new java.awt.Color(85, 91, 110));
        buLlave.setForeground(new java.awt.Color(250, 249, 249));
        buLlave.setText("Generar Llave:");
        buLlave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buLlaveActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri Light", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(250, 249, 249));
        jLabel1.setText("5IV7 - Chico Lampart Ariadna");

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(panelLayout.createSequentialGroup()
                            .addGap(77, 77, 77)
                            .addComponent(cif, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(118, 118, 118)
                            .addComponent(des, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(panelLayout.createSequentialGroup()
                            .addComponent(buArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(lblArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(panelLayout.createSequentialGroup()
                            .addGap(326, 326, 326)
                            .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtLlave, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(buLlave))))
                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblInstrucciones, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblInstrucciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(buLlave)
                        .addGap(18, 18, 18)
                        .addComponent(txtLlave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cif, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(des, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56))
        );

        getContentPane().add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 380));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // aquí van las variables del archivo
    
    // objeto filechooser
    JFileChooser fc = new JFileChooser();
    
    // variables al leer el archivo
    String cadena;
    File archivo;
    int valor;
    
    // variables al crear la llave
    SecretKey subllave;
    String llave;
    
    // variables al cifrar y descifrar el archivo
    FileInputStream in;
    FileOutputStream out;
    Cipher cifrado;
    FileReader fr = null;
    BufferedReader br = null;
    int bytesleidos;
    byte[] buffer;
    String encodeKey;
    
    public static void mensajeAyuda() {
        System.out.println("El archivo está vacío");
    }

    public static void mostrarBytes(byte[] buffer) {
        System.out.write(buffer, 0, buffer.length);
    }
    
    
    private void buArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buArchivoActionPerformed
        // TODO add your handling code here:
        cadena = "";
        
        // filtramos archivos para que entre únicamente txt
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        fc.setFileFilter(filtro);
        
        // abrimos la ventana y guardamos el archivo seleccionado
        int selec = fc.showOpenDialog(this);
        
        if(selec == JFileChooser.APPROVE_OPTION){
            //seleccionamos el archivo
            archivo = fc.getSelectedFile();
            
            //escribimos la ruta del archivo
            this.lblArchivo.setText(archivo.getAbsolutePath());
            
            try(FileReader fr = new FileReader(archivo)){
                valor = fr.read();
                while (valor != -1){
                    cadena = cadena + (char) valor;
                    valor = fr.read();
                }
                this.txtArchivo.setText(cadena);
                System.out.println(cadena);
            }catch(IOException el){
                el.printStackTrace();
            }
        };
        
    }//GEN-LAST:event_buArchivoActionPerformed

    private void buArchivoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buArchivoMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_buArchivoMouseClicked

    private void cifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cifActionPerformed
        // TODO add your handling code here:
        
        // verificamos que haya texto en el archivo
        if(cadena.length() == 0){
            mensajeAyuda();
            System.out.println("La longitud de la cadena dentro del archivo es de: " + cadena.length());
            System.exit(1);
        }
        
        // empezamos a cifrar
        try{
            System.out.println("\n1 - empieza\n");
            // inicializar la llave
            // tamaño de la llave
            // la variable 'llave' toma la llave del cuadro de texto
            llave = Base64.getEncoder().encodeToString(this.txtLlave.getText().getBytes());
            System.out.println("llave: " + llave);
            System.out.println("subllave: " + subllave);
            
            byte[] decodedKey = Base64.getDecoder().decode(llave);
            System.out.println("\n2 - llave\n");
            
            // método para ver los bytes
            cifrado = Cipher.getInstance("DES/ECB/PKCS5Padding");  //AES, RSA, cualquier otro tipo de cifrado
            System.out.println("\n3 - encode\n");
        
            // ciframos
            System.out.println("Cifrar con DES el fichero : "+ archivo.getName() + ", dejar el resultado en: "
            + archivo.getName() + ".cifrado");
            cifrado.init(Cipher.ENCRYPT_MODE, subllave);
            System.out.println("\n4 - cifrado init\n");
            
            buffer = new byte[1000];
            byte[] bufferCifrado;     
            in = new FileInputStream(archivo);
            System.out.println("\n5 - entra\n");
            
            // se guarda el archivo cifrado
            out = new FileOutputStream(archivo + ".cifrado");
            System.out.println("\n6 - guarda\n");
        
            bytesleidos = in.read(buffer, 0, 1000);
            
            while(bytesleidos != -1){
                //mientras no se llegue al final del archivo o fichero
                bufferCifrado = cifrado.update(buffer, 0, bytesleidos);
                //para el texto claro leer y enviarlo al buffer cifrado
                out.write(bufferCifrado);
                //escribir el archivo cifrado
                bytesleidos = in.read(buffer, 0, 1000);
                System.out.println("\n7 - escribe\n");
            }
        //cuando termine de leer el archivo
        bufferCifrado = cifrado.doFinal();
        out.write(bufferCifrado);
        
        in.close();
        out.close();
        
        }catch(Exception e){}

    }//GEN-LAST:event_cifActionPerformed

    private void desActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desActionPerformed
        // TODO add your handling code here:
        try{
            cifrado.init(Cipher.DECRYPT_MODE, subllave);
            // descrifra la subllave modificada            
            System.out.println("\nDescifrar con DES el fichero : " + archivo.getName() + ", dejar el resultado en: "
            + archivo.getName() + ".descifrado");
            cifrado.init(Cipher.DECRYPT_MODE, subllave);
            
            byte[] bufferPlano; // resultado descifrado
            in = new FileInputStream(archivo + ".cifrado");
            out = new FileOutputStream(archivo + ".descifrado");
            
            bytesleidos = in.read(buffer, 0, 1000);
            
            while(bytesleidos != -1){
                //mientras no se llegue al final del archivo o fichero
                bufferPlano = cifrado.update(buffer, 0, bytesleidos);
                //para el texto claro leer y enviarlo al buffer cifrado
                out.write(bufferPlano);
                //escribir el archivo cifrado
                bytesleidos = in.read(buffer, 0, 1000);
            }
        
        //cuando termine de leer el archivo
        bufferPlano = cifrado.doFinal();
        //escribir el archivo de salida
        out.write(bufferPlano);
        
        in.close();
        out.close();
        
        }catch(Exception e){}
    }//GEN-LAST:event_desActionPerformed

    private void buLlaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buLlaveActionPerformed
        // TODO add your handling code here:
        try {
            // generamos una llave
            KeyGenerator generadorDES = KeyGenerator.getInstance("DES");
            generadorDES.init(56);
            
            // generamos una subllave
            subllave = generadorDES.generateKey();

            // si se ingresó una llave en el Text Field
            // pasamos los 8 caracteres a 64 bits
            encodeKey = Base64.getEncoder().encodeToString(subllave.getEncoded());
            llave = Base64.getEncoder().encodeToString(encodeKey.getBytes());
            
            // mostramos la llave en el espacio
            this.txtLlave.setText(llave);
            
            // pasamos la llave a binario
            mostrarBytes(subllave.getEncoded());
            System.out.println("\nla llave es: " + llave + "\n");
            
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buLlaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buArchivo;
    private javax.swing.JButton buLlave;
    private javax.swing.JButton cif;
    private javax.swing.JButton des;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblArchivo;
    private javax.swing.JLabel lblInstrucciones;
    private javax.swing.JPanel panel;
    private javax.swing.JTextArea txtArchivo;
    private javax.swing.JTextField txtLlave;
    // End of variables declaration//GEN-END:variables
}
